# Basic data processing

Now that we understand how **R** handles data, we can start working with pre-existing data files. These files need to be correctly formatted and in a file format that **R** can recognize. Don't worry, there are plenty of options.

The first step when loading data in **R** is to locate our working directory. This is the default location where **R** will look for files we want to load and where it will put any files we save. Working directory will vary on different computers. To determine which directory **R** is using as your working directory, run:

```{r get working directory}
getwd()
```

You can move your working directory to any folder on your computer with the function `setwd()`. Just give `setwd()` the [file path](https://www.codecademy.com/resources/docs/general/file-paths) to your new working directory. I prefer to set my working directory to a folder dedicated to whichever project I am currently working on. This way, all related data, scripts, graphs, and reports are in the same place. For example:

```{r}
#| eval: false
setwd("C:/Users/user_name/workshop_folder/learning_r/code")
```

You can also change your working directory by clicking on Session > Set Working Directory > Choose Directory in the **R**Studio menu bar. The Windows and Mac graphical user interfaces have similar options. If you start **R** from a UNIX command line (as on Linux machines), the working directory will be whichever directory you were in when you called R.

`list.files()` will show you what files are in your working directory. If the file that you want to open is in your working directory, then you are ready to proceed.

## Loading data

Once we know where to find data files in our computer, we can start loading them into **R**. Note, however, that we need specific ways to open different file formats.

### Plain text files

Plain-text files are simple and many programs can read them. This is why many organizations (e.g., the Census Bureau, the Social Security Administration, etc.) publish their data as plain-text files.

A plain-text file stores a table of data in a text document. Each row of the table is saved on its own line, and a simple symbol separates the cells within a row. This symbol is often a comma, but it can also be a tab, a pipe delimiter `|`, or any other character. Each file only uses one symbol to separate cells, which minimizes confusion.

We will work with data from [this](https://github.com/CSCAR/workshop-r-intro/blob/main/data_files/flower.csv)^[You can find the original file [here](https://alexd106.github.io/intro2R/data.html) courtesy of Douglas et al. (see references).] plain text file. Use `Ctrl+Shift+s` to download the file. Then save it in your working directory with the name "flower".

#### read.table

`read.table()` can load plain-text files. The first argument of `read.table()` is the name of your file (if it is in your working directory), or the file path to your file (if it is not in your working directory). 
```{r loading flower_df}
flower_df <- read.table("data_files/flower.csv", header = TRUE, sep = ",")
```

In the code above, I added two more arguments, `header` and `sep`. `header` tells **R** whether the first line of the file contains variable names instead of values. `sep` tells **R** the symbol that the file uses to separate the cells.

Sometimes a plain-text file starts with text that is not part of the data set. Or, maybe we want to read only part of a data set. Argument `skip` tells R to skip a specific number of lines before it starts reading in values from the file. Argument `nrow` tells **R** to stop reading in values after it has read in a certain number of lines. Keep in mind that the header row doesnâ€™t count towards the total rows allowed by `nrow`.

```{r}
flower_df_chunk <- read.table(
    "data_files/flower.csv", 
    header = TRUE, 
    sep = ",", 
    skip = 0, 
    nrow = 3
)
flower_df_chunk
```

`read.table()` has other arguments that you can tweak. You can consult the function's help page to know more about it.

#### Shortcuts for read.table

**R** has shortcut functions that call `read.table()` in the background with different default values for popular types of files:

+ `read.table` is the general purpose read function.
+ `read.csv` reads comma-separated values (.csv) files.
+ `read.delim` reads tab-delimited files.
+ `read.csv2` reads .csv files with European decimal format.
+ `read.delim2` reads tab-delimited files with European decimal format.

#### read.fwf

There is a type of plain-text file called *fixed-width file* (.fwf). Instead of a symbol, a fixed-width file uses its layout to separate data cells. Each row is still in a single line, and each column begins at a specific number of characters from the left-hand side of the document. To correctly position its data, the file adds an arbitrary number of character spaces between data entries.

If our flowers data came in a fixed-width file, the first few lines would look like this:
```{flowers as a fwf}
treat  nitrogen block  height  weight  leafarea  shootarea  flowers
tip    medium   1      7.5     7.62    11.7      31.9       1
tip    medium   1      10.7    12.14   14.1      46.0       10
tip    medium   1      11.2    12.76   7.1       66.7       10
tip    medium   1      10.4    8.78    11.9      20.3       1
tip    medium   1      10.4    13.58   14.5      26.9       4
tip    medium   1      9.8     10.08   12.2      72.7       9
```


Fixed-width files may be visually intuitive, but they are difficult to work with. Perhaps because of this, **R** has a function for reading fixed-width files, but not for saving them.

You can read fixed-width files into R with the function `read.fwf()`. This function adds another argument to the ones from `read.table()`: `widths`, which should be a vector of numbers. Each ith entry of the `widths` vector should state the width (in characters) of the ith column of the data set.

```{r}
#| include: false
flowers_fwf_df <- read.fwf(
    "data_files/flowers.fwf", 
    widths = c(6, 9, 6, 7, 7, 9, 10, 9), 
    header = FALSE,
    skip = 1
)
flowers_fwf_df
```

#### HTML links

`read.table` and its shortcuts allow us to load data files directly from a website. Instead of using the file's path or name, we can directly use a web address in the `file` argument of the function. Do make sure that you are using the web address that links directly to the file, not to a web page that has a link to the file.

## Cleaning data

First we want to make sure that the column names follow the rules we saw in section 1. This will facilitate working with different columns later.

Now we want to ensure that every column has the right format. Let's check the types of the columns in our current data set **R**.

```{r}
# str(flowers_df_clean)
```

Columns INSERT NAMES HERE are of type character, which is not wrong, but it will be easier to handle them if we convert them to factors.
```{r}

```

Next, let's substitute the "missing" values with 

Notice that column INSERT NAME HERE is of type character, but it has numbers there. In this case, the reason is that one value in INSERT NAME HERE has quotation marks, so **R** coerces the entire column to be of type character. We can fix this by doing:
```{r}

```

## Data summaries and visualizations

Now that our data is clean, we can get more complete summaries to understand what is going on. Function `summary()` recognizes the type of each column and displays an intuitively appropriate summary:

```{r}
# summary(flower_df_clean)
```



## References

Most of this section is based on ["Hands-On Programming with R"](https://rstudio-education.github.io/hopr/), by Garret Grolemund; and on ["An Introduction to R"](https://intro2r.com/), by Alex Douglas, Deon Roos, Francesca Mancini, Ana Couto & David Lusseau.