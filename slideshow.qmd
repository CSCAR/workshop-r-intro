---
title: "Intro to R with RStudio"
author: "Abner Heredia Bustos, CSCAR"
format:
  revealjs:
    incremental: true
project:
  type: default
  output-dir: docs/
---

```{r}
source("load_clean_flower_df.R")
```


## About this workshop

For novice or inexperienced coders that want to use **R**. We will use RStudio to:

+ Use and write basic functions.
+ Learn how R stores and handles different types of data. 
+ Basic ways to create, manipulate, import, clean, and summarize data.
+ *NO* statistical modeling.

## Workshop format

+ From 1 to 5 pm.
+ Breaks every 90 minutes.
+ A few slides for context and extra information.
+ A lot of hands-on coding and live demonstrations.
+ All materials will be available after the workshop ends.

::: {.notes}
This workshop runs from 1 to 5 pm, with breaks at least every 90 minutes. Right now I will use a few slides for context and extra information. But it is a WORKshop, so there will be plenty of hands-on coding and live demonstrations. All materials will be available after the workshop ends, so don't worry about copying these slides.
:::

## Tips for this workshop

+ Coding along with me is the best way to learn.
+ Ask questions at any time.
+ During exercises, interact with your peers.

::: {.notes}
Coding along with me is the best way to learn. If you just watch, you will not remember anything after you leave today. Feel free to ask questions at any time. Code can be confusing and mistakes are easy to make, but I'm here to help, so don't be afraid to interrupt me. During exercises, interact with your peers. We all struggle with computers, but it's easier if we can help each other.
:::

## What is CSCAR?

+ Full name: Consulting for Statistics, Computing and Analytics Research.
+ A unit of the Office of the Vice President of Research (OVPR).
+ Guides and trains researchers in data collection, management, and analysis.
+ Also helps researchers to use technical software and advanced computing.

::: {.notes}
Before we get to the coding part, let me tell you a little bit about the people behind this workshop: CSCAR.
:::

## CSCAR is here to help you

+ Free, one-hour consultations with graduate-level statisticians.
+ GSRAs are available for walk-in consultations Monday through Friday, between 9am and 5pm (we close on Tuesdays between noon and 1pm). 
+ All of our scheduled appointments can be either remote or in-person.

::: {.notes}
All of our scheduled appointments can be either remote or in-person. So, if you live out of town, work in a different campus or just don't want to deal with bad weather, you can still ask CSCAR for help.
:::

## Contact CSCAR

+ To request a consultation: email <deskpeople@umich.edu>, or fill [this form](https://docs.google.com/forms/d/e/1FAIpQLSei-twcjFkoobUrVwSQTmSxdKKEc1Ub8w5LHmeIZUmTV1wmIg/viewform?pli=1). Or visit [cscar.research.umich.edu](cscar.research.umich.edu).
+ Self-schedule a consultation with a GSRA using [this link](https://calendar.google.com/calendar/u/0/selfsched?sstoken=UUMyTFpCR1RXbmhYfGRlZmF1bHR8ZWNjNGJlMWZlYTA4ZWE5NzYzNmNkNzgyZjUyZDYxNDg).
+ Address: The University of Michigan, 3560 Rackham, 915 E. Washington St., Ann Arbor, MI 48109-1070.

::: {.notes}
There are several ways to contact CSCAR. You can request a consultation by email or by filling this form. You can also self-schedule a consultation with a GSRA using this link. Our office is at 3560 Rackham, 915 E. Washington St., Ann Arbor, Michigan.
:::

## Who am I?

+ Abner Heredia Bustos, a data science consultant at CSCAR.
+ I want to make coding as simple and effortless as possible...
+ ...which means learning it well from the beginning.

::: {.notes}
My name is Abner Heredia Bustos. I am a data science consultant at CSCAR. Apart from this, all you need to know is that, for me, coding is just a mean to an end. This means that I will try hard to make coding as simple and effortless as possible for you; but to achieve this you will need to put some effort in learning the basics.
:::

# Why do you want to learn R?

## R is cheap and powerful

+ **R** is gratis ($0) and it runs on Windows, MacOS, and several Unix platforms. 
+ You can start with this:

---

```{r loading flower data}
#| echo: false
head(flower_df, 5)
```

---

and, in 8 lines of code or less, make this:
```{r height by nitrogen boxplots}
#| echo: false
#| fig-width: 6.2
#| fig-height: 4.5
#| fig-align: center
boxplot(
    height ~ nitrogen,
    data = flower_df, 
    col = c("yellow", "blue", "pink"),
    main = "No clear association between height and nitrogen level",
    xlab = "Nitrogen",
    ylab = "Height"
)
```

::: {.notes}
You can change the colors, the order of the boxes, the names, and much more. Doing all of this will be straightforward once you are familiar with R's syntax.
:::

## R is an *environment*, not a package

+ A package is a fixed set of tools. 
+ An environment is for combining, modifying, and creating tools.

::: {.notes}
R is very powerful because it is an environment, not a package. A package is a fixed set of tools---what you see is what you get and that's it. An environment is for combining, modifying, and creating tools. So, even if a tool is not readily available in an environment, chances are there is a way to make it.
:::

## R has plenty of statistical tools and models

+ Generalized linear models (including linear regression).
+ Survival analysis.
+ Time series analysis.
+ Random and Mixed effects models.
+ Classification and clustering.
+ Sample size and power calculations.
+ Multivariable analysis (e.g., factor analysis, PCA, and SEM).

::: {.notes}
Luckily for us, other people have already built tools and models to do a lot of statistics. We have...

Better yet, people add more tools every day.
:::

## Even more tools and models

+ Users constantly publish their own code packages: more than 13 thousand in the Comprehensive **R** Archive Network (CRAN) as of March 2019.
+ Many complex statistical routines are not (and may never be) available in other statistical software.

::: {.notes}
As of March 2019, users like you and I have published more than 13 thousand packages in CRAN. Many of these packages implement complex statistical routines that are not (and may never be) available in other statistical software.
:::

## Why Isn't Everyone a Use**R**?

+ Some people only use the software they learned first, which is not always **R**.
+ Each package in R has its own rules to learn.
+ Help pages and error messages may be hard to understand.

::: {.notes}
But if R is so good, why isn't everyone a user? Some people only use whatever they learned first. They took a course in statistics years ago that used SPSS or STATA and that has been enough for them. Also, each package in R has its own rules to learn. You can find a lot of good help for popular 
packages written by professional developers, but not so much for smaller 
packages written by other common users. Worst of all, some of the error messages in R are uninformative, so fixing problems can be difficult. Still, I think the advantages are well worth the effort. 
:::

## Suggestions for Learning **R**

+ Learn interactively.
+ Don't worry about getting errors.
+ Ask other **R** users for help.

::: {.notes}
Learn interactively. Retype, experiment, go crazy with sample code. Today I will show you many examples that you can use and you can find many more online. Also, don't worry about making mistakes. Even professional coders make errors all the time, and you can learn a lot from error messages. Besides you can always ask other users for help. Take advantage of R's popularity to tap into our collective knowledge. It's also a good excuse to get up from your desk every once in a while.
:::

## Some useful links

::: {.nonincremental}

-   <https://www.r-project.org>: Here you will find links for downloading **R**,
    downloading additional packages for **R**, and more.
-   <https://cran.r-project.org/web/views/>: Summaries of important packages         by subject field or analysis type.
-   <https://journal.r-project.org>: The **R** Journal.
-   <https://stats.stackexchange.com>: Cross-Validated.
-   <https://www.r-bloggers.com>
    
:::

## More useful links

::: {.nonincremental}

-   <https://stats.idre.ucla.edu/r/>: Institute for Digital Research and
    Education at UCLA.
-   <https://socialsciences.mcmaster.ca/jfox/>: John Fox's home page.
-   <https://sas-and-r.blogspot.com/>: Examples of code to perform same task
    in SAS and R.
    
:::

# Let's start coding

## Practice your arithmetic

Think of an integer, double it, add six, divide it in half, subtract the number you started with, and then square it. If your code is correct, the answer should be nine.

## Object names have rules

+ Names can be a combination of letters, digits, periods `.` and underscores
  `_`.
+ Names can *not* include white spaces.
+ If a name starts with a period `.`, it can *not* be followed by a digit.
+ Names can *not* start with a number or an underscore `_`.
+ Names are case-sensitive (`age`, `Age` and `AGE` are three different objects).
+ Reserved words can *not* be used as names (`TRUE`, `FALSE`, `NULL`, `if`, ...).

## Tips for naming objects

+ Avoid giving your object the same name as a built-in function.
+ To separate words, use an underscore (`my_object`) or a dot (`my.object`), or capitalize the different words (`MyObject`). Choose your favorite way, but *be consistent* with it.
+ Use names that illustrate what you want to do with the objects.

## Exercise

Write a function that can simulate the roll of a pair of six-sided dice an arbitrary number of times. This function should return a vector with the values of the red die that were strictly larger than the corresponding values of the blue die. Hint: to simulate rolling a die, you can use the function `sample()`.

## Coercion

When adding different data types to the same atomic vector, **R** follows specific rules to coerce everything to be of the same type.

+ If a character string is present in an atomic vector, **R** will convert all other values to character strings. 
+ If a vector only contains logicals and numbers, **R** will convert the logicals to numbers; every `TRUE` becomes a `1`, and every `FALSE` becomes a `0`. 
+ `NA`s are never coerced automatically.

## Make a histogram

Use the example I showed to you to make a histogram for variable `height`. Bonus: can you color the bars?

Your histogram result should resemble this one:

```{r histogram of height}
#| echo: false
#| fig-width: 6.5
#| fig-height: 5
#| fig-align: center
hist(
    flower_df$height,
    breaks = 12,
    xlim = c(0, 20),
    xlab = "Height",
    main = "Few weights are above 20",
    col = "green"
)
```

---

Here is the code for the histogram:

```{r}
#| echo: true
#| eval: false
hist(
    flower_df$height,
    breaks = 12,
    xlim = c(0, 20),
    xlab = "Height",
    main = "Few weights are above 20",
    col = "green"
)
```

## Make a boxplot

Use the example I showed to you to make a histogram for variable `leaf_area`. Bonus: can you color the box?

```{r boxplot for leaf_area}
#| echo: false
#| fig-width: 4
#| fig-height: 5
#| fig-align: center
boxplot(
    flower_df$leaf_area, 
    ylab = "Leaf area", 
    col = "blue",
    main = "Most leaf areas are between 11 and 18"
)
```

---

Here is the code for the boxplot.

```{r}
#| echo: true
#| eval: false
boxplot(
    flower_df$leaf_area, 
    ylab = "Leaf area", 
    col = "blue",
    main = "Most leaf areas are between 11 and 18"
)
```


## Make a scatterplot

Use the example I showed to you to make a scatter plot with `height` and `weight`, coloring by nitrogen level. Remember to add a legend to the plot. Your scatter plot should resemble this one:

---

```{r}
#| echo: false
#| fig-width: 6
#| fig-height: 4.5
#| fig-align: center
plot(
    x = flower_df$weight,
    y = flower_df$height, 
    col = flower_df$nitrogen,
    main = "No clear association between height and weight",
    xlab = "Weight",
    ylab = "Height"
)
# Add a legend to the plot
legend(
    x = "bottomright", 
    legend = levels(flower_df$nitrogen), 
    col = 1:length(levels(flower_df$nitrogen)), 
    pch = 16
)
```

---

Here is the code for the scatter plot.

```{r}
#| echo: true
#| eval: false
plot(
    x = flower_df$weight,
    y = flower_df$height, 
    col = flower_df$nitrogen,
    main = "No clear association between height and weight",
    xlab = "Weight",
    ylab = "Height"
)
# Add a legend to the plot
legend(
    x = "bottomright", 
    legend = levels(flower_df$nitrogen), 
    col = 1:length(levels(flower_df$nitrogen)), 
    pch = 16
)
```


## Make a mosaic plot

Use the example I showed to you to make a mosaic plot to visualize how frequently the values of nitrogen and treat combine with each other, but only for flowers with a weight below 10. Your plot should resemble this:

---

```{r mosaic plot for nitrogen vs treat}
#| echo: false
#| fig-width: 5
#| fig-height: 4
#| fig-align: center
nitrogen_by_treat_table = xtabs(
    formula = ~ nitrogen + treat,
    data = flower_df[which(flower_df$weight < 10),]
)
mosaicplot(nitrogen_by_treat_table, main = "Nitrogen by treat, weight below 10")
```

---

Here is the code for the mosaic plot

```{r}
#| echo: true
#| eval: false
nitrogen_by_treat_table = xtabs(
    formula = ~ nitrogen + treat,
    data = flower_df[which(flower_df$weight < 10),]
)
mosaicplot(nitrogen_by_treat_table, main = "Nitrogen by treat, weight below 10")
```

